package db

import (
	"errors"
	"fmt"
	"sync"
)

// Ensure memoryDB conforms to the UrlInfoDatabase interface.
var _ UrlInfoDatabase = &memoryDB{}

// memoryDB is a simple in-memory persistence layer for urls.
type memoryDB struct {
	mu   sync.Mutex
	urls map[string]*UrlInfo // maps from url to urlinfo.
}

func newMemoryDB() *memoryDB {
	return &memoryDB{
		urls: make(map[string]*UrlInfo),
	}
}

// Close closes the database.
func (db *memoryDB) Close() {
	db.mu.Lock()
	defer db.mu.Unlock()

	db.urls = nil
}

// GetUrl retrieves a urlinfo by its url.
func (db *memoryDB) GetUrl(url string) (*UrlInfo, error) {
	db.mu.Lock()
	defer db.mu.Unlock()

	urlInfo, ok := db.urls[url]
	if !ok {
		return nil, fmt.Errorf("memorydb: url not found with url %s", url)
	}
	return urlInfo, nil
}

// UpdateUrl updates the entry for a given url.
func (db *memoryDB) UpdateUrl(urlInfo *UrlInfo) error {
	if urlInfo.URL == "" {
		return errors.New("memorydb: urlInfo with empty URL passed into UpdateUrl")
	}

	db.mu.Lock()
	defer db.mu.Unlock()

	db.urls[urlInfo.URL] = urlInfo
	return nil
}
