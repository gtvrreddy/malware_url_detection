package db

import (
	"fmt"

	"gopkg.in/mgo.v2"
	"gopkg.in/mgo.v2/bson"
)

const (
	DBNAME  = "urlinfo"
	COLNAME = "urls"
)

type mongoDB struct {
	conn *mgo.Session
	c    *mgo.Collection
}

// Ensure mongoDB conforms to the UrlInfoDatabase interface.
var _ UrlInfoDatabase = &mongoDB{}

// newMongoDB creates a new UrlInfoDatabase backed by a given Mongo server,
// authenticated with given credentials.
func newMongoDB(addr string, cred *mgo.Credential) (UrlInfoDatabase, error) {
	conn, err := mgo.Dial(addr)
	if err != nil {
		return nil, fmt.Errorf("mongo: could not dial: %v", err)
	}

	if cred != nil {
		if err := conn.Login(cred); err != nil {
			return nil, err
		}
	}

	return &mongoDB{
		conn: conn,
		c:    conn.DB(DBNAME).C(COLNAME),
	}, nil
}

// Close closes the database.
func (db *mongoDB) Close() {
	db.conn.Close()
}

// GetUrl retrieves a urlinfo by its url.
func (db *mongoDB) GetUrl(url string) (*UrlInfo, error) {
	urlInfo := &UrlInfo{}
	if err := db.c.Find(bson.D{{Name: "url", Value: url}}).One(urlInfo); err != nil {
		return nil, err
	}
	return urlInfo, nil
}

// UpdateUrl updates the entry for a given url.
func (db *mongoDB) UpdateUrl(urlInfo *UrlInfo) error {
	return db.c.Update(bson.D{{Name: "url", Value: urlInfo.URL}}, urlInfo)
}
